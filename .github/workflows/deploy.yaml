name: Deploy Fullstack app to AWS Elastic Beanstalk

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Generate .dockercfg
        run: echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$(echo -n ${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | base64)\"}}}" > .dockercfg

      - name: Create a directory for .dockercfg
        run: mkdir -p dockercfg && mv .dockercfg dockercfg/

      - name: Upload .dockercfg to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: 'ap-northeast-2'
          SOURCE_DIR: 'dockercfg'
          DEST_DIR: 'index.docker.io'

      - name: Build Docker Image for Tests
        run: docker build -t 86tkstar/react-test-app -f ./frontend/Dockerfile.dev ./frontend

      - name: Run Tests
        run: docker run 86tkstar/react-test-app npm test

      - name: Build and Push Backend Image
        run: |
          docker build -t 86tkstar/docker-fullstack-app:backend-latest ./backend
          docker push 86tkstar/docker-fullstack-app:backend-latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t 86tkstar/docker-fullstack-app:frontend-latest ./frontend
          docker push 86tkstar/docker-fullstack-app:frontend-latest

      - name: Build and Push Nginx Image
        run: |
          docker build -t 86tkstar/docker-fullstack-app:nginx-latest ./nginx
          docker push 86tkstar/docker-fullstack-app:nginx-latest

      - name: Generate deployment package
        run: zip deploy.zip Dockerrun.aws.json docker-compose.yml

      - name: Cleanup old application versions
        run: |
#          AWS CLI를 사용하여 이전 애플리케이션 버전 목록 가져오기
          old_versions=$(aws elasticbeanstalk describe-application-versions --application-name docker-fullstack-app-2 --query 'ApplicationVersions[?VersionLabel!=`current-version`].VersionLabel' --output text)
#         각 이전 버전에 대해 삭제 명령 실행
          for version in $old_versions; do
            aws elasticbeanstalk delete-application-version --application-name docker-fullstack-app-2 --version-label $version --delete-source-bundle
          done

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: docker-fullstack-app-2
          environment_name: Docker-fullstack-app-2-env
          existing_bucket_name: elasticbeanstalk-ap-northeast-2-486157951835
          version_label: ${{ github.sha }}
          region: ap-northeast-2
          deployment_package: deploy.zip
          use_existing_version_if_available: true


